# -*- coding: utf-8 -*-
"""22301242_md. Sabbir Akon_lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wUzndSecwVB2-LwBP1HXvIXy4sa9mf2d
"""

import random
def gen(x):
 r=[]
 for i in range(x):
  r.append([random.randint(1,99),random.randint(1,99),random.randint(1,99)])
 return r

def f(x,p):
 v=1000
 for i in p:
  m=v*(x[2]/100)
  if i<=-x[0]:
   v-=m*(x[0]/100)
  elif i>=x[1]:
   v+=m*(x[1]/100)
  else:
   v+=m*(i/100)
 return v-1000

def s(p,f):
 i= random.randint(0,len(p)-1)
 j= random.randint(0,len(p)-1)
 while i==j:
  j=random.randint(0,len(p)-1)
 return p[i],p[j]

def c(a,b):
 p=random.randint(1,2)
 return a[:p]+b[p:],b[:p]+a[p:]

def m(c):
 if random.random()<0.05:
  c[random.randint(0,2)]=random.randint(1,99)
 return c

def r(p,g):
 x=gen(4)
 for i in range(g):
  v=[f(j,p)for j in x]
  n=[]
  for j in range(len(x)//2):
   a,b=s(x,v)
   print(a, b)
   d,e=c(a,b)
   #print(d, e)
   n.append(m(d))
   n.append(m(e))
  x=n
 v= []
 for j in x:
    v.append(f(j, p))
 mx= max(v)
 mi= v.index(mx)
 w= x[mi]

 print("Gen:",g," ",x)
 print("FitS:", g, " ",v)
 return{"stoploss":w[0],"takeprofit":w[1],"tradesize":w[2]},max(v)

def genalg(p, inipop, g):
    p = []
    for i in inipop:
        p.append(i["stop_loss"])
    bstrategy, fprofit = r(p, g)
    return bstrategy, fprofit

g=10
p=[-1.2,3.4,-0.8,2.1,-2.5,1.7,-0.3,5.8,-1.1,3.5]
inipop = [
    {"stop_loss": 2, "take_profit": 5, "trade_size": 20},
    {"stop_loss": 3, "take_profit": 7, "trade_size": 30},
    {"stop_loss": 1.5, "take_profit": 4, "trade_size": 25},
    {"stop_loss": 2.5, "take_profit": 6, "trade_size": 15}
]
bstrategy, fprofit = genalg(p, inipop, g)
print("val check:",p,g)
print("best strategy:",bstrategy)
print("profit final:",fprofit)

import random

def cx(p):
    l=len(p)
    x=random.randint(0,l-1)
    y=random.randint(0,l-1)
    while x==y:
        y=random.randint(0, l - 1)

    pt1=random.randint(0,len(p[x])-1)
    pt2=random.randint(pt1+1,len(p[x]))
    p1=p[x][:pt1]
    p2=p[y][pt1:pt2]
    p3=p[x][pt2:]
    p4=p[y][:pt1]
    p5=p[y][pt2:]
    o1=p1+p2+p3
    o2=p4+p2+p5

    m1=random.randint(0,len(o1)-1)
    m2=random.randint(0,len(o2)-1)
    o1=mut(o1,m1)
    o2=mut(o2,m2)

    print("parent1:",p[x],"parent2:",p[y])
    print(pt1,pt2)
    print("offspring1:",o1)
    print("offspring2:",o2)

def mut(o,idx):
    o=o[:idx]+str(random.randint(0,1))+o[idx+1:]
    return o

p=['110010010','101010101','111000100','001100100','000110101'] #in the question only binary values was presented as example, thats why i used binary numbers
cx(p)